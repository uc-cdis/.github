name: Test and deploy dictionaries

# OVERVIEW
#
# The `dictionaryutils` package is used for dumping the schemas from the parent dictionary repo.
# Dependencies on both `gen3dictionary` and `gdcdictionary`
# cause conflict in importing the correct `SCHEMA_DIR` used for dumping schemas.
#
# There are two steps to ensure setting the correct source:
#  - uninstall `gen3dictionary` after the dictionaryutils install.
#  - Re-install the dictionary in the parent repo as `gdcdictionary`
#
# In order to ensure the correct virtual env usage and
# compatibility with both pyproject.yaml and setup.py for the dictionary repos, we
# conditionally select `poetry` or `pip` when installing the dictionary as `gdcdictionary`,
#
# Then the `run_tests.sh` script will:
#    - uninstall `gen3dictionary`
#    - run the dictionary tests from dictionaryutils which expects `gdcdictionary` library as the unit to test
#    - run the dump schemas to move it to the /artifacts folder

on:
  workflow_call:
    inputs:
      BUCKET:
        required: false
        type: string
        default: "dictionary-artifacts"
      REGION:
        required: false
        type: string
        default: "us-east-1"
      DIRECTORY:
        required: true
        type: string
    secrets:
      DICT_AWS_ACCESS_KEY_ID:
        required: true
      DICT_AWS_SECRET_ACCESS_KEY:
        required: true
jobs:
  test:
    runs-on: ubuntu-20.04
    steps:
    - name: checkout
      uses: actions/checkout@v3.3.0
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    - name: Install AWS CLI
      uses: chrislennon/action-aws-cli@1.1
    - name: Install poetry
      # that is poetry's recommended way to install
      run: |
        pip install --upgrade pip
        curl -sSL https://install.python-poetry.org | python -
        pip list
    - name: Create setup.py if we have a pyproject.toml
      # Force parent to use setup.py like openaccess_dictionary
      run: |
        if [ -f pyproject.toml ]; then
        cat <<EOT >> setup.py
        from setuptools import setup, find_packages

        setup(
            name='gdcdictionary',
            version='0.0.0',
            packages=find_packages(),
            install_requires=[
                'dictionaryutils',
            ],
            dependency_links=[
              "git+https://github.com/uc-cdis/dictionaryutils.git@1.2.0#egg=dictionaryutils",
            ],
            package_data={
                "gdcdictionary": [
                    "schemas/*.yaml",
                    "schemas/projects/*.yaml",
                    "schemas/projects/*/*.yaml",
                ]
            },
        )
        EOT

          rm pyproject.toml
          rm poetry.lock

        fi
    - name: Get dictionaryutils library and install
      run: |
        git clone https://github.com/uc-cdis/dictionaryutils
        cd dictionaryutils
        poetry install -vv --all-extras --no-interaction
    - name: Uninstall gdcdictionary
      # remove gdcdictionary or gen3dictionary conditionally
      run: |
        if [ -f setup.py ]; then
          cd dictionaryutils
          echo "Removing 'gdcdictionary' via poetry"
          poetry remove gdcdictionary
          pip uninstall -y gen3dictionary
          cd ..
        fi
        if [ -f pyproject.toml ]; then
          cd dictionaryutils
          echo "Removing 'gen3dictionary' via pip"
          pip uninstall -y gen3dictionary
          pip uninstall -y gdcdictionary
        fi
    - name: Attempt pip re-install of dictionary as `gdcdictionary`
      run: |
        echo "Re-installing the dictionary as 'gdcdictionary'"
        if [ -f setup.py ]; then
          echo "via pip"
          cd dictionaryutils
          pip install ..
        fi
        if [ -f pyproject.toml ]; then
          echo "via pip in dictionaryutils"
          cd dictionaryutils
          pip install ..
        fi
    - name: Run dictionary tests, dump schema, and move to S3
      run: |
        cd dictionaryutils
        echo "dependencies before run_test"
        poetry show
        echo "Schema dir for artifact"
        python -c "from gdcdictionary import SCHEMA_DIR; print(SCHEMA_DIR)"
        echo "Schemas"
        ls `python -c "from gdcdictionary import SCHEMA_DIR; print(SCHEMA_DIR)"`
        echo "Schema dir under poetry"
        poetry run python -c "from gdcdictionary import SCHEMA_DIR; print(SCHEMA_DIR)"
        echo "Schemas"
        ls `poetry run python -c "from gdcdictionary import SCHEMA_DIR; print(SCHEMA_DIR)"`

        echo "Run tests under poetry"
        poetry run ./run_tests.sh
        echo "Number of schemas in artifact"
        grep -o ".yaml\"" artifacts/schema.json | wc -l

        # echo "Run tests directly"
        # bash ./run_tests.sh
        # echo "Number of schemas in artifact"
        # grep -o ".yaml\"" artifacts/schema.json | wc -l

        echo "Create artifact under poetry"
        poetry run python bin/dump_schema.py
        echo "Number of schemas in artifact"
        grep -o ".yaml\"" artifacts/schema.json | wc -l

        echo "Create artifact directly"
        python bin/dump_schema.py
        echo "Number of schemas in artifact"
        grep -o ".yaml\"" artifacts/schema.json | wc -l

        # Temporarily disable s3 copy
        # aws s3 cp artifacts/schema.json s3://${{ inputs.BUCKET }}/${{ inputs.DIRECTORY }}/$GITHUB_REF_NAME/schema.json --region ${{ inputs.REGION }}

      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.DICT_AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.DICT_AWS_SECRET_ACCESS_KEY }}
        AWS_EC2_METADATA_DISABLED: true
