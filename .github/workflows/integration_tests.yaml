name: Integration Tests

on:
  workflow_call:
    inputs:
      # needed to be set if repo name differs in quay
      QUAY_REPO:
        required: false
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
    integration_tests:
        runs-on: ubuntu-latest

        defaults:
          run:
            # the test directory in gen3-code-vigil
            working-directory: gen3-integration-tests

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JENKINS_URL: "https://jenkins.planx-pla.net"
          JENKINS_USERNAME: "PlanXCyborg"
          JENKINS_PASSWORD: ${{ secrets.JENKINS_API_TOKEN }}
          REPO: ${{ github.event.repository.name }}
          BRANCH: ${{ github.event.pull_request.head.ref }}
          PR_NUM: ${{ github.event.pull_request.number }}
          PR_LABELS: ${{ toJson(github.event.pull_request.labels.*.name) }}
          COMMIT_SHA: ${{ github.event.pull_request.head.sha }}
          COMMIT_TIME: ${{ github.event.pull_request.head.repo.pushed_at }}

        steps:
          # Checkout current branch of gen3-code-vigil if it is the repo under test
          - name: Checkout integration test code from dev branch
            if: github.event.repository.name == 'gen3-code-vigil'
            uses: actions/checkout@v4

          # Checkout master branch of gen3-code-vigil when another repo is under test
          - name: Checkout integration test code from master branch
            if: github.event.repository.name  != 'gen3-code-vigil'
            uses: actions/checkout@v4
            with:
              repository: uc-cdis/gen3-code-vigil
              ref: master

          # gen3-integration-tests run with python 3.9
          - name: Set up Python
            uses: actions/setup-python@v4
            with:
              python-version: 3.9

          # Install gen3-integration-tests dependencies
          - name: Install dependencies
            run: |
              python -m pip install --upgrade pip
              pip install poetry
              poetry install -vv

          # TODO: Rely on a database in AWS to make this faster
          # Select an unlocked environment
          # If an env is specified in a PR label use it, else pick one from the pool
          - name: Select CI environment
            run: |
              labels="${PR_LABELS//\\n/ }"
              env_label=$(echo "$labels" | jq -r 'map(select(test("jenkins-"; "i"))) | first')
              if [[ $env_label != "" && $env_label != null ]]; then
                echo "Found PR label $env_label"
                poetry run python -m gen3_ci.scripts.select_ci_environment $env_label
              else
                poetry run python -m gen3_ci.scripts.select_ci_environment
              fi

          # TODO: Improve the logic to do differential updates to the env, not roll all services
          # Apply the changes to the manifest of the selected CI environment, roll the pods and run usersync
          # Generate API keys for test users for the environment
          - name: Prepare CI environment
            run: |
              mkdir $HOME/.gen3
              ls -al $HOME
              poetry run python -m gen3_ci.scripts.prepare_ci_environment

          - name: Run tests
            run: poetry run pytest --html=report.html --self-contained-html -n auto -m "not wip"

          - name: Release CI environment
            if: always()
            run: |
              poetry run python -m gen3_ci.scripts.release_ci_environment
