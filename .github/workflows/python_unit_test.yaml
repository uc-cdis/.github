name: Run Python unit tests using Poetry, with a Postgres backend

on: 
  workflow_call:
    inputs:
      setup-script-location:
        description: 'A URL identifying a Bash script that can run commands needed for service-specific test setup'
        required: true
        type: string
      python-versions:
        description: 'The version of Python to run the unit tests against. Expected to be a string representing an array of versions, this construct is needed due to limitations with Github Actions'
        required: false
        type: string
        default: "['3.9']"
      package-names:
        description: 'A list of paths to modules to test code coverage against. Expected to be a string representing an array of versions, this construct is needed due to limitations with Github Actions'
        required: true
        type: string
      test-file-locations: 
        description: 'A list of paths to directories that hold tests. This is necessary for services like Sheepdog, that run separate suites of tests due to data requirements. Expected to be a string representing an array of versions, this construct is needed due to limitations with Github Actions'
        required: false
        type: string
        default: "['tests']"
env: 
  PGPASSWORD: postgres

jobs:
  process_versions:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - id: set-matrix
      run: echo "::set-output name=matrix::${{ inputs.python-versions }}"

  run_tests:
    needs: process_versions
    runs-on: ubuntu-latest
    
    strategy: 
      matrix:
        python-version: ${{fromJson(needs.process_versions.outputs.matrix)}}
    
    #Defining the Postgres DB service we will need to run the unit tests
    services:
      postgres:
        image: postgres:9.6-bullseye
        ports:
          - "5432:5432"
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up python
        uses: actions/setup-python@v4
        with:
          python-version: "${{matrix.python-version}}"
      - name: Install poetry
        run: |
            pip --version
            pip install poetry
            poetry install -vv
      - name: Service specific setup
        run: |
            curl -sSL "${{inputs.setup-script-location}}" | bash
      - name: Run test
        run: | 
          modules=$(echo ${{inputs.package-names}} | sed 's/\[//g' | sed 's/,//g' | sed 's/\]//g')

          arrModules=($modules)
          coverages=""

          for module in ${arrModules[@]}; do
            coverages="$coverages --cov=$module"
          done
        
          testLocations=$(echo ${{inputs.test-file-locations}} | sed 's/\[//g' | sed 's/,//g' | sed 's/\]//g')

          arrTestLocations=($testLocations)

          echo poetry run pytest -vv --cov=${{inputs.package-name}} --cov-report xml ${arrTestLocations[0]}

          for (( i=1; i<${#arrTestLocations[@]}; i++ )); do
            poetry run pytest -vv $coverages --cov-report xml --cov-append ${arrTestLocations[$i]}
          done
