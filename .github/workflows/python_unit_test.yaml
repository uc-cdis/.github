name: Run Python unit tests using Poetry, with a Postgres backend

on:
  workflow_call:
    inputs:
      setup-script:
        description: 'A Bash script in the tests directory of the Python repo that handles any setup needed for testing'
        required: false
        default: 'tests/ci_setup.sh'
        type: string
      test-script:
        description: 'A Bash script in the tests directory of the Python repo that handles running tests'
        required: false
        default: 'tests/ci_commands_script.sh'
        type: string
      python-version:
        description: 'The Python version to use and defaults to latest'
        required: false
        default: '3.9'
        type: string

jobs:
  run_tests:
    runs-on: ubuntu-latest

    #Defining a Postgres DB service, for tests that use it
    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          persist-credentials: false
      - name: Set up python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}
      - name: Install poetry
        run: |
          pip install --upgrade pip
          pip install poetry
          pip list
          poetry install -vv
          poetry show
      - name: Run the service-specific setup script, if it exists
        run: |
          if test -f "${{ inputs.setup-script }}"; then
            echo "Running setup script ${{ inputs.setup-script }}"
            bash ${{ inputs.setup-script }}
          else
            echo "Setup script ${{ inputs.setup-script }} not found."
          fi
        env:
            # The hostname used to communicate with the PostgreSQL service container
            POSTGRES_HOST: postgres
            POSTGRES_PASSWORD: postgres
            POSTGRES_PORT: 5432
      - name: Run tests
        run: | 
          if test -f "${{ inputs.test-script }}"; then
            echo "Running test script ${{ inputs.test-script }}"
            bash ${{ inputs.test-script }}
          else
            echo "Test script ${{ inputs.test-script }} not found. Falling back to default command"
            poetry run pytest -vv
          fi
        env:
            # The hostname used to communicate with the PostgreSQL service container
            POSTGRES_HOST: postgres
            POSTGRES_PASSWORD: postgres
            POSTGRES_PORT: 5432
